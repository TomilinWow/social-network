{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js","../../src/utils/isCheckBoxInput.ts","../../src/utils/isDateObject.ts","../../src/utils/isNullOrUndefined.ts","../../src/utils/isObject.ts","../../src/logic/getNodeParentName.ts","../../src/logic/isNameInFieldArray.ts","../../src/utils/compact.ts","../../src/utils/isUndefined.ts","../../src/utils/get.ts","../../src/constants.ts","../../src/utils/omit.ts","../../src/useFormContext.tsx","../../src/logic/getProxyFormState.ts","../../src/utils/isEmptyObject.ts","../../src/logic/shouldRenderFormState.ts","../../src/utils/convertToArrayPayload.ts","../../src/utils/isKey.ts","../../src/utils/stringToPath.ts","../../src/utils/set.ts","../../src/logic/appendErrors.ts","../../src/logic/focusFieldBy.ts","../../src/utils/cloneObject.ts","../../src/utils/isPrimitive.ts","../../src/utils/deepEqual.ts","../../src/utils/getValidationModes.ts","../../src/utils/isBoolean.ts","../../src/utils/isFileInput.ts","../../src/utils/isFunction.ts","../../src/utils/isHTMLElement.ts","../../src/utils/isMultipleSelect.ts","../../src/utils/isRadioInput.ts","../../src/utils/isRadioOrCheckbox.ts","../../src/utils/isString.ts","../../src/utils/isWeb.ts","../../src/utils/live.ts","../../src/utils/omitKeys.ts","../../src/utils/Subject.ts","../../src/utils/unset.ts","../../src/logic/getCheckboxValue.ts","../../src/logic/getFieldValueAs.ts","../../src/logic/getRadioValue.ts","../../src/logic/getFieldValue.ts","../../src/logic/getMultipleSelectValue.ts","../../src/logic/getResolverOptions.ts","../../src/logic/hasValidation.ts","../../src/utils/deepMerge.ts","../../src/logic/setFieldArrayDirtyFields.ts","../../src/logic/skipValidation.ts","../../src/logic/unsetEmptyArray.ts","../../src/utils/isMessage.ts","../../src/utils/isRegex.ts","../../src/logic/getValidateError.ts","../../src/logic/getValueAndMessage.ts","../../src/logic/validateField.ts","../../src/logic/createFormControl.ts","../../src/useForm.ts"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","_createForOfIteratorHelper","o","allowArrayLike","it","F","s","n","e","f","normalCompletion","didErr","step","_e2","element","type","data","Date","isObjectType","isNullOrUndefined","isDateObject","name","substring","search","names","some","current","getNodeParentName","filter","Boolean","val","obj","path","defaultValue","isObject","result","compact","split","reduce","key","isUndefined","EVENTS","VALIDATION_MODE","INPUT_VALIDATION_RULES","source","copy","FormContext","displayName","formState","_proxyFormState","localProxyFormState","isRoot","createGetter","prop","defineProperty","get","keys","formStateData","omit","isEmptyObject","find","test","input","replace","set","object","index","tempPath","isKey","stringToPath","lastIndex","newValue","objValue","isNaN","validateAllFieldCriteria","errors","message","types","focusFieldBy","fields","callback","fieldsNames","field","_f","ref","focus","refs","cloneObject","getTime","deepEqual","object1","object2","isPrimitive","keys1","keys2","val1","includes","val2","mode","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","HTMLElement","isRadioInput","isCheckBoxInput","window","document","isHTMLElement","contains","keyName","map","tearDowns","tearDown","this","teardown","observer","subscription","closed","add","observers","subscriber","unset","previousObjRef","updatePath","childObject","slice","baseGet","k","objectRef","currentPaths","currentPathsLength","item","isBoolean","defaultResult","isValid","validResult","options","values","option","checked","disabled","attributes","valueAsNumber","valueAsDate","setValueAs","NaN","defaultReturn","previous","getFieldValue","every","isFileInput","files","getRadioValue","isMultipleSelect","selected","isCheckBox","getCheckboxValue","getFieldValueAs","_fieldss","criteriaMode","shouldUseNativeValidation","mount","required","min","max","maxLength","minLength","pattern","validate","deepMerge","target","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentNode","parentName","isBlurEvent","isTouched","isSubmitted","reValidateMode","isString","RegExp","getValidateError","validationData","isRegex","inputValue","a","inputRef","setCustomValidty","reportValidity","setCustomValidity","error","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","getValueAndMessage","maxOutput","minOutput","valueDate","exceedMin","valueNumber","parseFloat","maxLengthOutput","minLengthOutput","patternValue","match","isFunction","validateError","validationResult","defaultOptions","shouldFocusError","isWindowUndefined","createFormControl","_delayCallback","props","formOptions","_formState","isDirty","isValidating","submitCount","touchedFields","isSubmitting","isSubmitSuccessful","_fields","_formValues","_defaultValues","_isInAction","_isMounted","_timer","_names","Set","unMount","array","watch","_validateCount","_subjects","control","state","validationMode","getValidationModes","isValidateAllFieldCriteria","debounce","wait","args","clearTimeout","setTimeout","isFieldWatched","watchAll","has","updateErrorState","shouldRenderBaseOnError","shouldSkipRender","fieldState","previousError","shouldUpdateValid","delayError","updatedFormState","setFieldValue","shouldRender","fieldValue","isWeb","forEach","selectRef","checkboxRef","radioRef","getValues","shouldDirty","shouldTouch","updateTouchAndDirtyState","shouldValidate","trigger","isCurrentTouched","isChanged","previousIsDirty","_getIsDirty","isPreviousFieldDirty","isCurrentFieldDirty","isPreviousFieldTouched","executeResolver","resolver","context","executeResolverValidation","validateForm","shouldCheckValid","valid","validateField","fieldError","handleChange","inputType","shouldSkipValidation","hasValidation","deps","skipValidation","isWatched","parentNodeName","valError","_updateValid","_updateValidAndInputValue","shouldSkipValueAs","defaultChecked","skipRender","setValues","entries","fieldKey","fieldName","_getWatch","fieldNames","isGlobal","fieldValues","convertToArrayPayload","_updateValues","_updateFieldArray","method","output","updatedFieldArrayValuesWithKey","shouldSet","shouldSetFields","updatedFieldArrayValues","omitKeys","argA","argB","unsetEmptyArray","setFieldArrayDirtyFields","omitKey","_getFieldArrayValue","setValue","isFieldArray","schemaResult","Promise","all","shouldFocus","clearErrors","inputName","setError","subscribe","info","unregister","delete","keepValue","keepError","keepDirty","keepTouched","shouldUnregister","keepDefaultValue","keepIsValid","registerFieldRef","fieldRef","register","querySelectorAll","isRadioOrCheckboxFunction","onChange","onBlur","_shouldUnregister","handleSubmit","onValid","onInvalid","preventDefault","persist","hasNoPromiseError","reset","formValues","keepStateOptions","updatedValues","keepValues","closest","keepDefaultValues","keepSubmitCount","keepIsSubmitted","keepErrors","setFocus","_removeFields","live","_updateProps","useForm","_formControl","updateFormState","formStateSubscription","shouldRenderFormState","unsubscribe","getProxyFormState"],"mappings":"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","file":"static/js/0.64cd94d6.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nexport default function _createForOfIteratorHelper(o, allowArrayLike) {\n  var it;\n\n  if (typeof Symbol === \"undefined\" || o[Symbol.iterator] == null) {\n    if (Array.isArray(o) || (it = unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") {\n      if (it) o = it;\n      var i = 0;\n\n      var F = function F() {};\n\n      return {\n        s: F,\n        n: function n() {\n          if (i >= o.length) return {\n            done: true\n          };\n          return {\n            done: false,\n            value: o[i++]\n          };\n        },\n        e: function e(_e) {\n          throw _e;\n        },\n        f: F\n      };\n    }\n\n    throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n  }\n\n  var normalCompletion = true,\n      didErr = false,\n      err;\n  return {\n    s: function s() {\n      it = o[Symbol.iterator]();\n    },\n    n: function n() {\n      var step = it.next();\n      normalCompletion = step.done;\n      return step;\n    },\n    e: function e(_e2) {\n      didErr = true;\n      err = _e2;\n    },\n    f: function f() {\n      try {\n        if (!normalCompletion && it[\"return\"] != null) it[\"return\"]();\n      } finally {\n        if (didErr) throw err;\n      }\n    }\n  };\n}","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (data: unknown) => data instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","export default (name: string) => name.substring(0, name.search(/.\\d/)) || name;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  [...names].some((current) => getNodeParentName(name) === current);\n","export default (value: any[]) => value.filter(Boolean);\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T extends unknown>(\n  obj: T,\n  path: string,\n  defaultValue?: unknown,\n) => {\n  if (isObject(obj) && path) {\n    const result = compact(path.split(/[,[\\].]+?/)).reduce(\n      (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n      obj,\n    );\n\n    return isUndefined(result) || result === obj\n      ? isUndefined(obj[path as keyof T])\n        ? defaultValue\n        : obj[path as keyof T]\n      : result;\n  }\n\n  return undefined;\n};\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","export default <Key extends string, T extends Record<Key, any>>(\n  source: T,\n  key: Key,\n): Omit<T, Key> => {\n  const copy = { ...source };\n  delete copy[key];\n\n  return copy;\n};\n","import * as React from 'react';\n\nimport omit from './utils/omit';\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst FormContext = React.createContext<UseFormReturn | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n>(): UseFormReturn<TFieldValues> =>\n  React.useContext(FormContext) as unknown as UseFormReturn<TFieldValues>;\n\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext extends object = object,\n>(\n  props: FormProviderProps<TFieldValues, TContext>,\n) => (\n  <FormContext.Provider\n    value={omit(props, 'children') as unknown as UseFormReturn}\n  >\n    {props.children}\n  </FormContext.Provider>\n);\n","import { VALIDATION_MODE } from '../constants';\nimport { FormState, FormStateProxy, ReadFormState } from '../types';\n\nexport default <TFieldValues>(\n  formState: FormState<TFieldValues>,\n  _proxyFormState: ReadFormState,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  function createGetter(prop: keyof FormStateProxy) {\n    return () => {\n      if (prop in formState) {\n        if (_proxyFormState[prop] !== VALIDATION_MODE.all) {\n          _proxyFormState[prop] = !isRoot || VALIDATION_MODE.all;\n        }\n        localProxyFormState && (localProxyFormState[prop] = true);\n        return formState[prop];\n      }\n      return undefined;\n    };\n  }\n\n  const result = {} as any as typeof formState;\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: createGetter(key as keyof FormStateProxy),\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport { ReadFormState } from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport omit from '../utils/omit';\n\nexport default <T extends Record<string, any>, K extends ReadFormState>(\n  formStateData: T,\n  _proxyFormState: K,\n  isRoot?: boolean,\n) => {\n  const formState = omit(formStateData, 'name');\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T extends unknown>(value: T) =>\n  Array.isArray(value) ? value : [value];\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","import { FieldRefs, InternalFieldName } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\nimport isUndefined from '../utils/isUndefined';\nimport omit from '../utils/omit';\n\nconst focusFieldBy = (\n  fields: FieldRefs,\n  callback: (name: string) => boolean,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[],\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const _f = field._f;\n      const current = omit(field, '_f');\n\n      if (_f && callback(_f.name)) {\n        if (_f.ref.focus && isUndefined(_f.ref.focus())) {\n          break;\n        } else if (_f.refs) {\n          _f.refs[0].focus();\n          break;\n        }\n      } else if (isObject(current)) {\n        focusFieldBy(current, callback);\n      }\n    }\n  }\n};\n\nexport default focusFieldBy;\n","import isObject from './isObject';\n\nexport default function cloneObject<T extends unknown>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n  } else if (isArray || isObject(data)) {\n    copy = isArray ? [] : {};\n    for (const key in data) {\n      copy[key] = cloneObject(data[key]);\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    isDateObject(object1) ||\n    isDateObject(object2)\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","export default (value: unknown): value is string => typeof value === 'string';\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => !isHTMLElement(ref) || !document.contains(ref);\n","import { FieldArrayWithId } from '../types';\n\nimport omit from './omit';\n\nexport default <T extends Partial<FieldArrayWithId>[]>(\n  fields: T,\n  keyName: string,\n) => fields.map((field = {}) => omit(field, keyName));\n","export type Observer<T> = {\n  next: (value: T) => void;\n};\n\ntype TearDown = () => void;\n\nexport type SubjectType<T> = {\n  next: (value: T) => void;\n  subscribe: (value: Observer<T>) => {\n    unsubscribe: TearDown;\n  };\n};\n\nexport class Subscription {\n  private tearDowns: TearDown[] = [];\n\n  add(tearDown: TearDown) {\n    this.tearDowns.push(tearDown);\n  }\n\n  unsubscribe() {\n    for (const teardown of this.tearDowns) {\n      teardown();\n    }\n    this.tearDowns = [];\n  }\n}\n\nclass Subscriber<T> implements Observer<T> {\n  closed = false;\n\n  constructor(private observer: Observer<T>, subscription: Subscription) {\n    subscription.add(() => (this.closed = true));\n  }\n\n  next(value: T) {\n    if (!this.closed) {\n      this.observer.next(value);\n    }\n  }\n}\n\nexport default class Subject<T> {\n  observers: Observer<T>[];\n\n  constructor() {\n    this.observers = [];\n  }\n\n  next(value: T) {\n    for (const observer of this.observers) {\n      observer.next(value);\n    }\n  }\n\n  subscribe(observer: Observer<T>) {\n    const subscription = new Subscription();\n    const subscriber = new Subscriber(observer, subscription);\n    this.observers.push(subscriber);\n\n    return subscription;\n  }\n\n  unsubscribe() {\n    this.observers = [];\n  }\n}\n","import isBoolean from './isBoolean';\nimport isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import { Field } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  value: any,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : +value\n    : valueAsDate\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return getMultipleSelectValue(ref.options);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fieldss: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field = get(_fieldss, name) as Field;\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>,\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport deepEqual from '../utils/deepEqual';\nimport { deepMerge } from '../utils/deepMerge';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport set from '../utils/set';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>,\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        !isNullOrUndefined(defaultValues) &&\n        deepEqual(get(defaultValues[index] || {}, key), values[index][key])\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields.slice(0, values.length)),\n    setDirtyFields(defaultValues, values, dirtyFields.slice(0, values.length)),\n  );\n","export default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<{\n    isOnSubmit: boolean;\n    isOnBlur: boolean;\n    isOnChange: boolean;\n    isOnTouch: boolean;\n    isOnAll: boolean;\n  }>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name, [])).length && unset(ref, name);\n","import * as React from 'react';\n\nimport { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || React.isValidElement(value as JSX.Element);\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport { Field, FieldError, InternalFieldErrors, Message } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async (\n  field: Field,\n  inputValue: any,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidty = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || ' ');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) && !ref.value) ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n      (isBoolean(inputValue) && !inputValue) ||\n      (isCheckBox && !getCheckboxValue(refs).isValid) ||\n      (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNaN(inputValue)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if ((maxLength || minLength) && !isEmpty && isString(inputValue)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidty(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidty(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidty(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidty(true);\n  return error;\n};\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  DeepPartial,\n  DelayCallback,\n  Field,\n  FieldError,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  Ref,\n  RegisterOptions,\n  ResolverResult,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UnpackNestedValue,\n  UpdateValues,\n  UseFormClearErrors,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormRegisterReturn,\n  UseFormReset,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport { set } from '../utils';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport getValidationModes from '../utils/getValidationModes';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckboxFunction from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport omit from '../utils/omit';\nimport omitKey from '../utils/omitKeys';\nimport omitKeys from '../utils/omitKeys';\nimport Subject from '../utils/Subject';\nimport unset from '../utils/unset';\n\nimport focusFieldBy from './focusFieldBy';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getNodeParentName from './getNodeParentName';\nimport getResolverOptions from './getResolverOptions';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport setFieldArrayDirtyFields from './setFieldArrayDirtyFields';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nconst isWindowUndefined = typeof window === 'undefined';\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let formOptions = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _delayCallback: DelayCallback;\n  let _formState = {\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  };\n  let _fields = {};\n  let _formValues = {};\n  let _defaultValues = formOptions.defaultValues || {};\n  let _isInAction = false;\n  let _isMounted = false;\n  let _timer = 0;\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  } as Names;\n  let _validateCount: Record<InternalFieldName, number> = {};\n  const _proxyFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    watch: new Subject(),\n    control: new Subject(),\n    array: new Subject(),\n    state: new Subject(),\n  };\n\n  const validationMode = getValidationModes(formOptions.mode);\n  const reValidateMode = getValidationModes(formOptions.reValidateMode);\n  const isValidateAllFieldCriteria =\n    formOptions.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T, wait: number) =>\n    (...args: any) => {\n      clearTimeout(_timer);\n      _timer = window.setTimeout(() => callback(...args), wait);\n    };\n\n  const isFieldWatched = (name: FieldPath<TFieldValues>) =>\n    _names.watchAll ||\n    _names.watch.has(name) ||\n    _names.watch.has((name.match(/\\w+/) || [])[0]);\n\n  const updateErrorState = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const shouldRenderBaseOnError = async (\n    shouldSkipRender: boolean,\n    name: InternalFieldName,\n    isValid: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ): Promise<void> => {\n    const previousError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid && _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      _delayCallback =\n        _delayCallback || debounce(updateErrorState, props.delayError);\n\n      _delayCallback(name, error);\n    } else {\n      clearTimeout(_timer);\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      ((error ? !deepEqual(previousError, error) : previousError) ||\n        !isEmptyObject(fieldState) ||\n        shouldUpdateValid) &&\n      !shouldSkipRender\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n\n    _validateCount[name]--;\n\n    if (_proxyFormState.isValidating && !_validateCount[name]) {\n      _subjects.state.next({\n        isValidating: false,\n      });\n      _validateCount = {};\n    }\n  };\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n    shouldRender?: boolean,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const _f = field._f;\n\n      if (_f) {\n        set(_formValues, name, getFieldValueAs(value, _f));\n\n        const fieldValue =\n          isWeb && isHTMLElement(_f.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isFileInput(_f.ref) && !isString(fieldValue)) {\n          _f.ref.files = fieldValue as FileList;\n        } else if (isMultipleSelect(_f.ref)) {\n          [..._f.ref.options].forEach(\n            (selectRef) =>\n              (selectRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(selectRef.value)),\n          );\n        } else if (_f.refs) {\n          if (isCheckBoxInput(_f.ref)) {\n            _f.refs.length > 1\n              ? _f.refs.forEach(\n                  (checkboxRef) =>\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : (_f.refs[0].checked = !!fieldValue);\n          } else {\n            _f.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else {\n          _f.ref.value = fieldValue;\n        }\n\n        if (shouldRender) {\n          _subjects.control.next({\n            values: getValues(),\n            name,\n          });\n        }\n\n        (options.shouldDirty || options.shouldTouch) &&\n          updateTouchAndDirtyState(name, fieldValue, options.shouldTouch);\n        options.shouldValidate && trigger(name as Path<TFieldValues>);\n      }\n    }\n  };\n\n  const updateTouchAndDirtyState = (\n    name: InternalFieldName,\n    inputValue: unknown,\n    isCurrentTouched?: boolean,\n    shouldRender = true,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    const state: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    let isChanged = false;\n\n    if (_proxyFormState.isDirty) {\n      const previousIsDirty = _formState.isDirty;\n      _formState.isDirty = _getIsDirty();\n      state.isDirty = _formState.isDirty;\n      isChanged = previousIsDirty !== state.isDirty;\n    }\n\n    if (_proxyFormState.dirtyFields && !isCurrentTouched) {\n      const isPreviousFieldDirty = get(_formState.dirtyFields, name);\n      const isCurrentFieldDirty = !deepEqual(\n        get(_defaultValues, name),\n        inputValue,\n      );\n      isCurrentFieldDirty\n        ? set(_formState.dirtyFields, name, true)\n        : unset(_formState.dirtyFields, name);\n      state.dirtyFields = _formState.dirtyFields;\n      isChanged =\n        isChanged || isPreviousFieldDirty !== get(_formState.dirtyFields, name);\n    }\n\n    const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n    if (isCurrentTouched && !isPreviousFieldTouched) {\n      set(_formState.touchedFields, name, isCurrentTouched);\n      state.touchedFields = _formState.touchedFields;\n      isChanged =\n        isChanged ||\n        (_proxyFormState.touchedFields &&\n          isPreviousFieldTouched !== isCurrentTouched);\n    }\n\n    isChanged && shouldRender && _subjects.state.next(state);\n\n    return isChanged ? state : {};\n  };\n\n  const executeResolver = async (name?: InternalFieldName[]) => {\n    return formOptions.resolver\n      ? await formOptions.resolver(\n          { ..._formValues } as UnpackNestedValue<TFieldValues>,\n          formOptions.context,\n          getResolverOptions(\n            name || _names.mount,\n            _fields,\n            formOptions.criteriaMode,\n            formOptions.shouldUseNativeValidation,\n          ),\n        )\n      : ({} as ResolverResult);\n  };\n\n  const executeResolverValidation = async (names?: InternalFieldName[]) => {\n    const { errors } = await executeResolver();\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const validateForm = async (\n    _fields: FieldRefs,\n    shouldCheckValid?: boolean,\n    context = {\n      valid: true,\n    },\n  ) => {\n    for (const name in _fields) {\n      const field = _fields[name];\n\n      if (field) {\n        const _f = field._f;\n        const fieldValue = omit(field, '_f');\n\n        if (_f) {\n          const fieldError = await validateField(\n            field,\n            get(_formValues, _f.name),\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          );\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n\n            if (shouldCheckValid) {\n              break;\n            }\n          }\n\n          if (!shouldCheckValid) {\n            fieldError[_f.name]\n              ? set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name);\n          }\n        }\n\n        fieldValue &&\n          (await validateForm(fieldValue, shouldCheckValid, context));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const handleChange: ChangeHandler = async ({\n    type,\n    target,\n    target: { value, name, type: inputType },\n  }) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      let error;\n      let isValid;\n      const inputValue = inputType ? getFieldValue(field._f) : value;\n      const isBlurEvent = type === EVENTS.BLUR;\n\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !formOptions.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          reValidateMode,\n          validationMode,\n        );\n      const isWatched = !isBlurEvent && isFieldWatched(name);\n\n      if (!isUndefined(inputValue)) {\n        set(_formValues, name, inputValue);\n      }\n\n      const fieldState = updateTouchAndDirtyState(\n        name,\n        inputValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || isWatched;\n\n      !isBlurEvent &&\n        _subjects.watch.next({\n          name,\n          type,\n        });\n\n      if (shouldSkipValidation) {\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(isWatched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && isWatched && _subjects.state.next({});\n\n      _validateCount[name] = _validateCount[name] ? +1 : 1;\n\n      _proxyFormState.isValidating &&\n        _subjects.state.next({\n          isValidating: true,\n        });\n\n      if (formOptions.resolver) {\n        const { errors } = await executeResolver([name]);\n        error = get(errors, name);\n\n        if (isCheckBoxInput(target as Ref) && !error) {\n          const parentNodeName = getNodeParentName(name);\n          const valError = get(errors, parentNodeName, {});\n          valError.type && valError.message && (error = valError);\n\n          if (valError || get(_formState.errors, parentNodeName)) {\n            name = parentNodeName;\n          }\n        }\n\n        isValid = isEmptyObject(errors);\n      } else {\n        error = (\n          await validateField(\n            field,\n            get(_formValues, name) as Field,\n            isValidateAllFieldCriteria,\n            formOptions.shouldUseNativeValidation,\n          )\n        )[name];\n\n        isValid = await _updateValid(true);\n      }\n\n      if (field._f.deps) {\n        trigger(field._f.deps as FieldPath<TFieldValues>[]);\n      }\n\n      shouldRenderBaseOnError(false, name, isValid, error, fieldState);\n    }\n  };\n\n  const _updateValidAndInputValue = (\n    name: InternalFieldName,\n    ref?: Ref,\n    shouldSkipValueAs?: boolean,\n  ) => {\n    const field = get(_fields, name) as Field;\n\n    if (field) {\n      const fieldValue = get(_formValues, name);\n      const defaultValue = isUndefined(fieldValue)\n        ? get(_defaultValues, name)\n        : fieldValue;\n\n      if (\n        isUndefined(defaultValue) ||\n        (ref && (ref as HTMLInputElement).defaultChecked) ||\n        shouldSkipValueAs\n      ) {\n        set(\n          _formValues,\n          name,\n          shouldSkipValueAs ? defaultValue : getFieldValue(field._f),\n        );\n      } else {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    _isMounted && _updateValid();\n  };\n\n  const _getIsDirty: GetIsDirty = (name, data) => {\n    name && data && set(_formValues, name, data);\n\n    return !deepEqual({ ...getValues() }, _defaultValues);\n  };\n\n  const _updateValid = async (skipRender?: boolean) => {\n    let isValid = false;\n    if (_proxyFormState.isValid) {\n      isValid = formOptions.resolver\n        ? isEmptyObject((await executeResolver()).errors)\n        : await validateForm(_fields, true);\n\n      if (!skipRender && isValid !== _formState.isValid) {\n        _formState.isValid = isValid;\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n    return isValid;\n  };\n\n  const setValues = (\n    name: FieldPath<TFieldValues>,\n    value: UnpackNestedValue<PathValue<TFieldValues, FieldPath<TFieldValues>>>,\n    options: SetValueConfig,\n  ) =>\n    Object.entries(value).forEach(([fieldKey, fieldValue]) => {\n      const fieldName = `${name}.${fieldKey}` as Path<TFieldValues>;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n          )\n        : setFieldValue(\n            fieldName,\n            fieldValue as SetFieldValue<TFieldValues>,\n            options,\n            true,\n          );\n    });\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    fieldNames,\n    defaultValue,\n    isGlobal,\n  ) => {\n    const fieldValues = {\n      ...(_isMounted\n        ? _formValues\n        : isUndefined(defaultValue)\n        ? _defaultValues\n        : isString(fieldNames)\n        ? { [fieldNames]: defaultValue }\n        : defaultValue),\n    };\n\n    if (!fieldNames) {\n      isGlobal && (_names.watchAll = true);\n      return fieldValues;\n    }\n\n    const result = [];\n\n    for (const fieldName of convertToArrayPayload(fieldNames)) {\n      isGlobal && _names.watch.add(fieldName as InternalFieldName);\n      result.push(get(fieldValues, fieldName as InternalFieldName));\n    }\n\n    return Array.isArray(fieldNames) ? result : result[0];\n  };\n\n  const _updateValues: UpdateValues<TFieldValues> = (\n    defaultValues,\n    name = '',\n  ): void => {\n    for (const key in defaultValues) {\n      const value = defaultValues[key];\n      const fieldName = name + (name ? '.' : '') + key;\n      const field = get(_fields, fieldName);\n\n      if (!field || !field._f) {\n        if (\n          (isObject(value) && Object.keys(value).length) ||\n          (Array.isArray(value) && value.length)\n        ) {\n          _updateValues(value, fieldName);\n        } else if (!field) {\n          set(_formValues, fieldName, value);\n        }\n      }\n    }\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    keyName,\n    name,\n    method,\n    args,\n    updatedFieldArrayValuesWithKey = [],\n    shouldSet = true,\n    shouldSetFields = true,\n  ) => {\n    let output;\n    const updatedFieldArrayValues = omitKeys(\n      updatedFieldArrayValuesWithKey,\n      keyName,\n    );\n    _isInAction = true;\n\n    if (shouldSetFields && get(_fields, name)) {\n      output = method(get(_fields, name), args.argA, args.argB);\n      shouldSet && set(_fields, name, output);\n    }\n\n    output = method(get(_formValues, name), args.argA, args.argB);\n    shouldSet && set(_formValues, name, output);\n\n    if (Array.isArray(get(_formState.errors, name))) {\n      const output = method(get(_formState.errors, name), args.argA, args.argB);\n      shouldSet && set(_formState.errors, name, output);\n      unsetEmptyArray(_formState.errors, name);\n    }\n\n    if (_proxyFormState.touchedFields && get(_formState.touchedFields, name)) {\n      const output = method(\n        get(_formState.touchedFields, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(_formState.touchedFields, name, output);\n      unsetEmptyArray(_formState.touchedFields, name);\n    }\n\n    if (_proxyFormState.dirtyFields || _proxyFormState.isDirty) {\n      set(\n        _formState.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues, keyName),\n          get(_defaultValues, name, []),\n          get(_formState.dirtyFields, name, []),\n        ),\n      );\n      updatedFieldArrayValues &&\n        set(\n          _formState.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            omitKey(updatedFieldArrayValues, keyName),\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n      unsetEmptyArray(_formState.dirtyFields, name);\n    }\n\n    _subjects.state.next({\n      isDirty: _getIsDirty(name, omitKey(updatedFieldArrayValues, keyName)),\n      dirtyFields: _formState.dirtyFields,\n      errors: _formState.errors,\n      isValid: _formState.isValid,\n    });\n  };\n\n  const _getFieldArrayValue = (name: InternalFieldName) =>\n    get(_isMounted ? _formValues : _defaultValues, name, []);\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n\n    set(_formValues, name, value);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: _formValues,\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        set(\n          _formState.dirtyFields,\n          name,\n          setFieldArrayDirtyFields(\n            value,\n            get(_defaultValues, name, []),\n            get(_formState.dirtyFields, name, []),\n          ),\n        );\n\n        _subjects.state.next({\n          name,\n          dirtyFields: _formState.dirtyFields,\n          isDirty: _getIsDirty(name, value),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(value)\n        ? setValues(name, value, options)\n        : setFieldValue(name, value, options, true);\n    }\n\n    isFieldWatched(name) && _subjects.state.next({});\n    _subjects.watch.next({\n      name,\n    });\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n    let isValid;\n\n    _subjects.state.next({\n      isValidating: true,\n    });\n\n    if (formOptions.resolver) {\n      const schemaResult = await executeResolverValidation(\n        isUndefined(name) ? name : fieldNames,\n      );\n      isValid = name\n        ? fieldNames.every((name) => !get(schemaResult, name))\n        : isEmptyObject(schemaResult);\n    } else {\n      if (name) {\n        isValid = (\n          await Promise.all(\n            fieldNames.map(async (fieldName) => {\n              const field = get(_fields, fieldName);\n              return await validateForm(\n                field._f ? { [fieldName]: field } : field,\n              );\n            }),\n          )\n        ).every(Boolean);\n\n        _updateValid();\n      } else {\n        isValid = await validateForm(_fields);\n      }\n    }\n\n    _subjects.state.next({\n      ...(isString(name) ? { name } : {}),\n      errors: _formState.errors,\n      isValid,\n      isValidating: false,\n    });\n\n    if (options.shouldFocus && !isValid) {\n      focusFieldBy(\n        _fields,\n        (key) => get(_formState.errors, key),\n        name ? fieldNames : _names.mount,\n      );\n    }\n\n    return isValid;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ..._defaultValues,\n      ..._formValues,\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames as InternalFieldName)\n      : fieldNames.map((name) => get(values, name as InternalFieldName));\n  };\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name\n      ? convertToArrayPayload(name).forEach((inputName) =>\n          unset(_formState.errors, inputName),\n        )\n      : (_formState.errors = {});\n\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = ((get(_fields, name, { _f: {} }) as Field)._f || {}).ref;\n\n    set(_formState.errors, name, {\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    fieldName?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: unknown,\n  ) =>\n    isFunction(fieldName)\n      ? _subjects.watch.subscribe({\n          next: (info: any) =>\n            fieldName(\n              _getWatch(\n                undefined,\n                defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n              ),\n              info,\n            ),\n        })\n      : _getWatch(\n          fieldName as InternalFieldName | InternalFieldName[],\n          defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const inputName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(inputName);\n      _names.array.delete(inputName);\n\n      if (get(_fields, inputName)) {\n        if (!options.keepValue) {\n          unset(_fields, inputName);\n          unset(_formValues, inputName);\n        }\n\n        !options.keepError && unset(_formState.errors, inputName);\n        !options.keepDirty && unset(_formState.dirtyFields, inputName);\n        !options.keepTouched && unset(_formState.touchedFields, inputName);\n        !formOptions.shouldUnregister &&\n          !options.keepDefaultValue &&\n          unset(_defaultValues, inputName);\n      }\n    }\n\n    _subjects.watch.next({});\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getIsDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const registerFieldRef = (\n    name: InternalFieldName,\n    fieldRef: HTMLInputElement,\n    options?: RegisterOptions,\n  ): ((name: InternalFieldName) => void) | void => {\n    register(name as FieldPath<TFieldValues>, options);\n    let field: Field = get(_fields, name);\n    const ref = isUndefined(fieldRef.value)\n      ? fieldRef.querySelectorAll\n        ? (fieldRef.querySelectorAll('input,select,textarea')[0] as Ref) ||\n          fieldRef\n        : fieldRef\n      : fieldRef;\n\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n\n    if (\n      ref === field._f.ref ||\n      (isRadioOrCheckbox &&\n        compact(field._f.refs || []).find((option) => option === ref))\n    ) {\n      return;\n    }\n\n    field = {\n      _f: isRadioOrCheckbox\n        ? {\n            ...field._f,\n            refs: [\n              ...compact(field._f.refs || []).filter(\n                (ref) => isHTMLElement(ref) && document.contains(ref),\n              ),\n              ref,\n            ],\n            ref: { type: ref.type, name },\n          }\n        : {\n            ...field._f,\n            ref,\n          },\n    };\n\n    set(_fields, name, field);\n\n    _updateValidAndInputValue(name, ref);\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n\n    set(_fields, name, {\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n\n    if (options.value) {\n      set(_formValues, name, options.value);\n    }\n\n    if (\n      isBoolean(options.disabled) &&\n      field &&\n      field._f &&\n      isBoolean(field._f.ref.disabled) &&\n      field._f.ref.disabled !== options.disabled\n    ) {\n      set(_formValues, name, options.disabled ? undefined : field._f.ref.value);\n    }\n\n    _names.mount.add(name);\n    !field && _updateValidAndInputValue(name, undefined, true);\n\n    return isWindowUndefined\n      ? ({ name: name as InternalFieldName } as UseFormRegisterReturn)\n      : {\n          name,\n          ...(isUndefined(options.disabled)\n            ? {}\n            : { disabled: options.disabled }),\n          onChange: handleChange,\n          onBlur: handleChange,\n          ref: (ref: HTMLInputElement | null): void => {\n            if (ref) {\n              registerFieldRef(name, ref, options);\n            } else {\n              const field = get(_fields, name, {}) as Field;\n              const _shouldUnregister =\n                formOptions.shouldUnregister || options.shouldUnregister;\n\n              if (field._f) {\n                field._f.mount = false;\n              }\n\n              _shouldUnregister &&\n                !(isNameInFieldArray(_names.array, name) && _isInAction) &&\n                _names.unMount.add(name);\n            }\n          },\n        };\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let hasNoPromiseError = true;\n      let fieldValues: any = { ..._formValues };\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      try {\n        if (formOptions.resolver) {\n          const { errors, values } = await executeResolver();\n          _formState.errors = errors;\n          fieldValues = values;\n        } else {\n          await validateForm(_fields);\n        }\n\n        if (\n          isEmptyObject(_formState.errors) &&\n          Object.keys(_formState.errors).every((name) => get(fieldValues, name))\n        ) {\n          _subjects.state.next({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          onInvalid && (await onInvalid(_formState.errors, e));\n          formOptions.shouldFocusError &&\n            focusFieldBy(\n              _fields,\n              (key) => get(_formState.errors, key),\n              _names.mount,\n            );\n        }\n      } catch (err) {\n        hasNoPromiseError = false;\n        throw err;\n      } finally {\n        _formState.isSubmitted = true;\n        _subjects.state.next({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful:\n            isEmptyObject(_formState.errors) && hasNoPromiseError,\n          submitCount: _formState.submitCount + 1,\n          errors: _formState.errors,\n        });\n      }\n    };\n\n  const reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues || _defaultValues;\n    const values = cloneObject(updatedValues);\n\n    _formValues = values;\n\n    if (isWeb && !keepStateOptions.keepValues) {\n      for (const name of _names.mount) {\n        const field = get(_fields, name);\n        if (field && field._f) {\n          const inputRef = Array.isArray(field._f.refs)\n            ? field._f.refs[0]\n            : field._f.ref;\n\n          try {\n            isHTMLElement(inputRef) && inputRef.closest('form')!.reset();\n            break;\n          } catch {}\n        }\n      }\n    }\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = { ...updatedValues };\n    }\n\n    if (!keepStateOptions.keepValues) {\n      _fields = {};\n\n      _subjects.control.next({\n        values: keepStateOptions.keepDefaultValues\n          ? _defaultValues\n          : { ...updatedValues },\n      });\n\n      _subjects.watch.next({});\n\n      _subjects.array.next({\n        values,\n      });\n    }\n\n    _names = {\n      mount: new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : keepStateOptions.keepDefaultValues\n        ? deepEqual(formValues, _defaultValues)\n        : false,\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: keepStateOptions.keepDirty ? _formState.dirtyFields : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n\n    _isMounted = !!keepStateOptions.keepIsValid;\n  };\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name) =>\n    get(_fields, name)._f.ref.focus();\n\n  const _removeFields = () => {\n    for (const name of _names.unMount) {\n      const field = get(_fields, name) as Field;\n\n      field &&\n        (field._f.refs ? field._f.refs.every(live) : live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  return {\n    control: {\n      register,\n      unregister,\n      _getWatch,\n      _getIsDirty,\n      _updateValid,\n      _updateValues,\n      _removeFields,\n      _updateFieldArray,\n      _getFieldArrayValue,\n      _subjects,\n      _shouldUnregister: formOptions.shouldUnregister,\n      _proxyFormState,\n      get _fields() {\n        return _fields;\n      },\n      set _fields(value) {\n        _fields = value;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      set _formValues(value) {\n        _formValues = value;\n      },\n      get _isMounted() {\n        return _isMounted;\n      },\n      set _isMounted(value) {\n        _isMounted = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      set _defaultValues(value) {\n        _defaultValues = value;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _isInAction() {\n        return _isInAction;\n      },\n      set _isInAction(value) {\n        _isInAction = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      _updateProps: (options) => {\n        formOptions = { ...defaultOptions, ...options };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n  };\n}\n","import * as React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport { FieldValues, FormState, UseFormProps, UseFormReturn } from './types';\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext> | undefined\n  >();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touchedFields: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    errors: {},\n  });\n\n  if (_formControl.current) {\n    _formControl.current.control._updateProps(props);\n  } else {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n\n  React.useEffect(() => {\n    const formStateSubscription = control._subjects.state.subscribe({\n      next(formState) {\n        if (shouldRenderFormState(formState, control._proxyFormState, true)) {\n          control._formState = {\n            ...control._formState,\n            ...formState,\n          };\n\n          updateFormState({ ...control._formState });\n        }\n      },\n    });\n\n    return () => {\n      formStateSubscription.unsubscribe();\n    };\n  }, [control]);\n\n  React.useEffect(() => {\n    if (!control._isMounted) {\n      control._isMounted = true;\n      control._proxyFormState.isValid && control._updateValid();\n      !props.shouldUnregister && control._updateValues(control._defaultValues);\n    }\n    control._removeFields();\n  });\n\n  _formControl.current.formState = getProxyFormState(\n    formState,\n    control._proxyFormState,\n  );\n\n  return _formControl.current;\n}\n"],"sourceRoot":""}